#pragma once

#include <Arduino.h>
#include <FS.h>

#define DEBUGLN(t) Serial.println(t);
#define DEBUG(t) Serial.print(t);

class IniConfig;

class IniConfigItem {
	public:
		String name;

		//@implement
        IniConfigItem(String &name, IniConfig* cfg) {
			this->name = name;
			this->config = cfg;
			this->set(NONE);
		}
		
		~IniConfigItem() {
			if (nextItem) {
				delete nextItem;
			}
		}
		
		//@implement
        void setFloat(double v) {
            this->valueFloat = v;
            set(FLOAT);
			config->changed();
        }

        //@implement
        void setInt(int v) {
            this->valueInt = v;
            set(INT);
			config->changed();
        }

        //@implement
        void setDword(uint32_t v) {
            this->valueDword = v;
            set(DWORD);
			config->changed();
        }

        //@implement
        void setBool(bool v) {
            this->valueBool = v;
            set(BOOL);
			config->changed();
        }

        //@implement
        void setString(String v) {
            this->stringValue = v;
            set(STRING);
			config->changed();
        }

        //@implement
        void unset() {
            this->stringValue = F("");
            set(NONE);
            cut();
			config->changed();
        }

        //@implement
        String getLine() {
            this->changed = false;

            String result = this->name + String('=');
            switch (this->type)
            {
                case STRING:
                    return result + stringValue;
                case DWORD:
                    return result + String(valueDword);
                case INT:
                    return result + String(valueInt);
                case FLOAT:
                    return result + String(valueFloat);
                case BOOL:
                    return result + valueBool ? String(F("true")) : String(F("false"));
                case NONE: {}
            }
            return String(F(""));
        }

        //@implement
        float getFloat(float def) {
            if (this->type == FLOAT) {
                return this->valueFloat;
            } else if (this->type == DWORD) {
                return (float)this->valueDword;
            } else if (this->type == INT) {
                return (float)this->valueInt;
            } else if (this->type == STRING) {
                return this->stringValue.toFloat();
            }
			return def;
        }

        //@implement
        int getInt(int def) {
            if (this->type == INT) {
                return this->valueInt;
            } else if (this->type == FLOAT) {
                return (int)this->valueFloat;
            } else if (this->type == DWORD) {
                return (int)this->valueDword;
            } else if (this->type == STRING) {
                return this->stringValue.toInt();
            }
			return def;
        }

        //@implement
        uint32_t getDword(uint32_t def) {
            if (this->type == DWORD) {
				return this->valueDword;
            } else if (this->type == FLOAT) {
                return (uint32_t)this->valueFloat;
            } else if (this->type == INT) {
                return (uint32_t)this->valueInt;
            } else if (this->type == STRING) {
                return this->stringValue.toInt();
            }
			return def;
        }

        //@implement
        bool getBool(bool def) {
            if (this->type == BOOL) {
                return this->valueBool;
            } else if (this->type == DWORD) {
                return this->valueDword != 0;
            } else if (this->type == INT) {
                return this->valueInt != 0;
            } else if (this->type == STRING) {
                return this->stringValue.equalsIgnoreCase(F("true"));
            }
            return def;
        }

        //@implement
        String getString(String def) {
            if (this->type == STRING) {
                return this->stringValue;
            } if (this->type == BOOL) {
                return String(this->valueBool);
            } else if (this->type == DWORD) {
                return String(this->valueDword);
            } else if (this->type == INT) {
                return String(this->valueInt);
            }
			return def;
        }

        //@implement
        IniConfigItem* getNext() {
            return this->nextItem;
        }
    
        //@implement
        void setNext(IniConfigItem* item) {
            this->nextItem = item;
        }

        //@implement
        IniConfigItem* cut() {
            if (prevItem) {
                prevItem->setNext(nextItem ? nextItem : NULL);
            }
            this->setNext(NULL);
            this->setPrev(NULL);
            return this;
        }

        //@implement
        void setPrev(IniConfigItem* prev) {
            this->setPrev(prev);
            if (prev)
                prev->setNext(this);
        }

        //@implement
        bool isChanged() {
            return this->changed;
        }

        //@implement
        void unChanged() {
            this->changed = false;
        }

    protected:
		enum ValueType {
			NONE,
			STRING,
			INT,
			FLOAT,
			DWORD,
            BOOL
		} 				type = NONE;

        union {
            int         valueInt;
            uint32_t    valueDword;
            double		valueFloat;
            bool        valueBool;
        };
        
		String			stringValue;
		bool 			changed = false;
		
		IniConfigItem*	nextItem = NULL;
        IniConfigItem*	prevItem = NULL;
		IniConfig*		config	= NULL;

        //@implement
        void set(ValueType type) {
            this->type = type;
            this->changed = true;
        }
};

class IniConfigGroup {
	public:
		String name;

        IniConfigGroup(String name) {
            this->name = name;
        }

        //@implement
        IniConfigItem* findItem(String name) {
            IniConfigItem* item = items;
            //DEBUGLN("group/fingItem")
            while (item) {
                //DEBUG("group/fingItem/check: ");
                //DEBUGLN(item->name);
                if (item->name.equalsIgnoreCase(name)) {
                    //DEBUGLN("group/fingItem/found")
                    return item;
                }
                item = item->getNext();
            }
            return NULL;
        }
		
        //@implement
		~IniConfigGroup() {
			if (items) {
				delete items;
			}
            if (nextGroup) {
                delete nextGroup;
            }
		}

        //@implement
        void cut() {
            if (prevGroup) {
                prevGroup->setNext( prevGroup ? prevGroup : NULL );
            }
            this->prevGroup = NULL;
            this->nextGroup = NULL;
        }

        //@implement
        void add(IniConfigItem* item) {
            if (!items) {
                //DEBUGLN("item/add/1");
                items = item;
                return;
            }
            IniConfigItem* prev = items;
            while (prev && prev->getNext()) {
                //DEBUGLN("item/add/2-");
                prev = prev->getNext();
            }
            prev->setNext(item);
        }

        //@implement
        void setNext(IniConfigGroup* next) {
            this->nextGroup = next;
        }

        //@implement
        void setPrev(IniConfigGroup* prev) {
            this->prevGroup = prev;
            if (prev)
                prev->setNext(this);
        }

        //@implement
        bool write(File &file) {
            if (items) {
                file.print(F("["));
                file.print(this->name);
                file.println(F("]"));

                IniConfigItem* item = items;
                while (item != NULL) {
                    String line = item->getLine();
                    if (line.length() > 0) {
                        file.println(line);
                    }
                    item = item->getNext();
                }
            }
            return true;
        }

        //@implement
        bool isChanged() {
            IniConfigItem* item = items;
			//Serial.println(String(F("group: ")) + this->name + F(" changed?"));
            while (item != NULL) {
				//Serial.println(String(F("Item: ")) + item->name + String(F(" changed?")) + String(item->isChanged()));
                if (item->isChanged()) {
                    return true;
                }
                item = item->getNext();
            }
            if (this->getNext()) {
                return this->getNext()->isChanged();
            }
            return false;
        }
		
		//@implement
        void dump() {
            IniConfigItem* item = items;
			Serial.println(String(F("== ")) + this->name + String(F(" ==")));
            while (item) {
				Serial.println(String(F("- ")) + item->name + String(item->isChanged() ? F(" +=") : F(" = ") ) + item->getString(F("")));
                item = item->getNext();
            }
            if (this->getNext()) {
                this->getNext()->dump();
            }
        }

        //@implement
        void unChanged() {
            IniConfigItem* item = items;
            while (item) {
                item->unChanged();
                item = item->getNext();
            }
            if (this->getNext()) {
                this->getNext()->unChanged();
            }
        }

        //@implement
        IniConfigGroup* getNext() {
            return nextGroup;
        }

        //@implement
        IniConfigGroup* getPrev() {
            return prevGroup;
        }

        IniConfigItem* getItems() {
            return items;
        }

    protected:
		IniConfigItem* items = NULL;
        IniConfigGroup* nextGroup = NULL;
        IniConfigGroup* prevGroup = NULL;
};

class IniConfig {
	public:
		IniConfig(String name, fs::FS* fs, bool doread = true) {
			this->filename = name;
			this->fs = fs;
			groups = NULL;
            if (doread) {
                this->read();
            }
		}
		
		~IniConfig() {
            clear();
		}

        //@implement
        void clear() {
            if (groups) {
				delete groups;
			}
        }

        //@implement
        bool isChanged() {
            if (this->groups) {
                return groups->isChanged();
            }
            return false;
        }

        //@implement
        IniConfigGroup* findGroup(String name) {
            IniConfigGroup* group = groups;
            while (group) {
                if (group->name.equalsIgnoreCase(name)) {
                    return group;
                }
                group = group->getNext();
            }
            return NULL;
        }

        //@implement
        IniConfigItem* findItem(String group, String name) {
            IniConfigGroup* g = this->findGroup(group);
            if (!g) {        
                return NULL;
            }
            return g->findItem(name);
        }

        //@implement
        IniConfigItem* findOrCreateItem(String group, String name) {
            IniConfigGroup* g = this->findGroup(group);
            IniConfigItem* item = NULL;
            if (g) {
                item = g->findItem(name);
            } else {
                g = new IniConfigGroup(group);
                this->add(g);
            }
            if (!item) {
                item = new IniConfigItem(name, this);
                g->add(item);
            }
            return item;
        }

        float stringToFloat(String &value, int pointAt) {
            float result = value.substring(0, pointAt).toInt();
            if (result > -1) {
                String right = value.substring(pointAt+1);
                uint8_t vlen = right.length();
                for (uint8_t p = 0; p < vlen; p++) {
                    uint8_t i = (int)right.charAt(p) - 48;
                    if (i > 0) {
                        result += ((double)i / ((double)pow(10, p+1)));
                    }
                }
            }
            return result;
        }

        //@implement
        //@include "FS.h"
		bool read() {
            clear();
            File file = fs->open(this->filename, "r");
            if (file) {
                IniConfigGroup* curGroup = NULL;
                while (file.available()) {
                    String line = file.readStringUntil('\n');
                    line.trim();

                    if (!line.isEmpty()) {
                        //DEBUGLN("not empt");
                        char c = line.charAt(0);
                        if (c == '[') {
                            //DEBUGLN("group!");
                            // group
                            if (line.charAt(line.length()-1) == ']') {
                                //DEBUGLN("GROUP::");
                                //DEBUGLN(line.substring(1, line.length()-1));
                                String name = line.substring(1, line.length()-1);
                                name.trim();
                                IniConfigGroup* group = new IniConfigGroup(name);
                                this->add(group);
                                curGroup = group;
                                //DEBUGLN(String(F("new group: ")) + name);
                            }
                            continue;
                        }
                        uint16_t delimPos = line.indexOf('=');
                        if (curGroup && delimPos > 0) {
                            String paramName = line.substring(0, delimPos);
                            paramName.trim();
                            String value = line.substring(delimPos+1);
                            value.trim();

                            IniConfigItem* item = curGroup->findItem(paramName);
                            if (!item) {
                                item = new IniConfigItem(paramName, this);
                                curGroup->add(item);
                            }

                            if (value.equalsIgnoreCase(F("true")) || value.equalsIgnoreCase(F("false")) ) {
                                item->setBool(value.equalsIgnoreCase(F("true")));
                            } else {
                                if (value.length() < 8) {
                                    bool decimals = true;
                                    for (uint16_t i = 0; i < value.length(); i++) {
                                        char c = value.charAt(i);
                                        if (c != '-' && c != '.' && !(c >= '0' && c <= '9')) {
                                            decimals = false;
                                            break;
                                        }
                                    }
                                    if (decimals) {
                                        int pointAt = value.indexOf('.');
                                        //num
                                        if (value.charAt(0) == '-') {
                                            if (pointAt == -1) {
                                                item->setInt( -1 * value.substring(1).toInt() );
                                            } else {
                                                value = value.substring(1);
                                                item->setFloat( -1.0 * stringToFloat(value, pointAt-1));
                                            }
                                        } else {
                                            if (pointAt != -1) {
                                                item->setFloat(stringToFloat(value, pointAt));
                                            } else {
                                                uint32_t v = 0;
                                                uint8_t vlen = value.length();
                                                for (uint8_t p = 0; p < vlen; p++) {
                                                    v += value.substring(vlen - 1 - p, vlen - p).toInt() * pow(10, p);
                                                }
                                                item->setDword(v);
                                            }
                                        }
                                    } else {
                                        item->setString(value);
                                    }
                                } else {
                                    item->setString(value);
                                }
                            }
                        }
                    }
                }
                file.close();
                this->unChanged();
            }
            return true;
		}
		
        //@implement
		bool write() {
            IniConfigGroup* group = groups;
            File file = fs->open(this->filename, "w");
            if (!file) {
                return false;
            }
            bool result = true;
            while (group != NULL) {
                if (group->write(file)) {
                    group = group->getNext();
                    if (group) {
                        file.println();
                    }
                } else {
                    result = false;
                    break;
                }
            }
            file.close();
            this->unChanged();
            return result;
		}

        bool update() {
            if (this->isChanged()) {
				Serial.println(F("writing...")); delay(2000);
                return this->write();
            } else {
				Serial.println(F("no update!")); delay(2000);
			}
            return true;
        }

        //@implement
        void removeGroup(String group) {
            IniConfigGroup* g = findGroup(group);
            if (g) {
                g->cut();
                delete g;
            }
        }

        //@implement
        void add(IniConfigGroup* group) {
            if (!groups) {
                groups = group;
                return;
            }
            IniConfigGroup* prev = groups;
            //DEBUGLN(String(F("add/check gr: ")) + prev->name);
            while (prev && prev->getNext()) {
                //DEBUGLN(String(F("add/check gr: ")) + prev->name);
                prev = prev->getNext();
            }
            //DEBUGLN(String(F("add/set prev gr: ")) + prev->name);
            group->setPrev(prev);
        }
		
		
        //@implement
        float getFloat(String group, String name, float def) {
            IniConfigItem* item = findItem(group, name);
            return item ? item->getFloat(def) : def;
        }

        //@implement
        int getInt(String group, String name, int def) {
            IniConfigItem* item = findItem(group, name);
            return item ? item->getInt(def) : def;
        }

        //@implement
        uint32_t getDword(String group, String name, uint32_t def) {
            IniConfigItem* item = findItem(group, name);
            return item ? item->getDword(def) : def;
        }

        //@implement
        bool getBool(String group, String name, bool def) {
            IniConfigItem* item = findItem(group, name);
            return item ? item->getBool(def) : def;
        }

        //@implement
        String getString(String group, String name, String def) {
            IniConfigItem* item = findItem(group, name);
            return item ? item->getString(def) : def;
        }

		//@implement
        void setFloat(String group, String item, float value) {
            findOrCreateItem(group, item)->setFloat(value);
        }

        //@implement
        void setInt(String group, String item, int value) {
            findOrCreateItem(group, item)->setInt(value);
        }

        //@implement
        void setDword(String group, String item, uint32_t value) {
            findOrCreateItem(group, item)->setDword(value);
        }

        //@implement
        void setBool(String group, String item, bool value) {
            findOrCreateItem(group, item)->setBool(value);
        }

        //@implement
        void setString(String group, String item, String value) {
            findOrCreateItem(group, item)->setString(value);
        }

        //@implement
        void unset(String group, String name) {
            IniConfigItem* item = findItem(group, name);
			if (item) {
				item->unset();
				delete item;
			}
        }
		
		void changed() {
			if (autoUpdate) {
				this->update();
			}
		}

        void unChanged() {
            if (this->groups) {
				groups->unChanged();
			}
        }
		
		//@implement
		void dump() {
			if (this->groups) {
				Serial.println(F("==[ CONFIG ]=="));
				groups->dump();
			}
		}
		
		void setAutoupdate(bool update) {
			this->autoUpdate = update;
		}

        IniConfigGroup* getGroups() {
            return groups;
        }

	protected:
		String			filename;
		IniConfigGroup*	groups = NULL;
		fs::FS*			fs;
		bool			autoUpdate = false;
};